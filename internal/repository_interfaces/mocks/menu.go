// Code generated by MockGen. DO NOT EDIT.
// Source: /home/yurii/delivery/internal/repository_interfaces/menu_interfaces.go

// Package mock_repository_interfaces is a generated GoMock package.
package mock_repository_interfaces

import (
	models "delivery/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIngredientRepositoryInterface is a mock of IngredientRepositoryInterface interface.
type MockIngredientRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockIngredientRepositoryInterfaceMockRecorder
}

// MockIngredientRepositoryInterfaceMockRecorder is the mock recorder for MockIngredientRepositoryInterface.
type MockIngredientRepositoryInterfaceMockRecorder struct {
	mock *MockIngredientRepositoryInterface
}

// NewMockIngredientRepositoryInterface creates a new mock instance.
func NewMockIngredientRepositoryInterface(ctrl *gomock.Controller) *MockIngredientRepositoryInterface {
	mock := &MockIngredientRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockIngredientRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIngredientRepositoryInterface) EXPECT() *MockIngredientRepositoryInterfaceMockRecorder {
	return m.recorder
}

// DeleteIngredient mocks base method.
func (m *MockIngredientRepositoryInterface) DeleteIngredient(ingredient string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIngredient", ingredient)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIngredient indicates an expected call of DeleteIngredient.
func (mr *MockIngredientRepositoryInterfaceMockRecorder) DeleteIngredient(ingredient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIngredient", reflect.TypeOf((*MockIngredientRepositoryInterface)(nil).DeleteIngredient), ingredient)
}

// GetIngredientByID mocks base method.
func (m *MockIngredientRepositoryInterface) GetIngredientByID(id int) (models.Ingredients, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIngredientByID", id)
	ret0, _ := ret[0].(models.Ingredients)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIngredientByID indicates an expected call of GetIngredientByID.
func (mr *MockIngredientRepositoryInterfaceMockRecorder) GetIngredientByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIngredientByID", reflect.TypeOf((*MockIngredientRepositoryInterface)(nil).GetIngredientByID), id)
}

// GetIngredientByName mocks base method.
func (m *MockIngredientRepositoryInterface) GetIngredientByName(name string) (models.Ingredients, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIngredientByName", name)
	ret0, _ := ret[0].(models.Ingredients)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIngredientByName indicates an expected call of GetIngredientByName.
func (mr *MockIngredientRepositoryInterfaceMockRecorder) GetIngredientByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIngredientByName", reflect.TypeOf((*MockIngredientRepositoryInterface)(nil).GetIngredientByName), name)
}

// GetIngredientIDByName mocks base method.
func (m *MockIngredientRepositoryInterface) GetIngredientIDByName(name string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIngredientIDByName", name)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIngredientIDByName indicates an expected call of GetIngredientIDByName.
func (mr *MockIngredientRepositoryInterfaceMockRecorder) GetIngredientIDByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIngredientIDByName", reflect.TypeOf((*MockIngredientRepositoryInterface)(nil).GetIngredientIDByName), name)
}

// InsertIngredient mocks base method.
func (m *MockIngredientRepositoryInterface) InsertIngredient(ingredient string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIngredient", ingredient)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertIngredient indicates an expected call of InsertIngredient.
func (mr *MockIngredientRepositoryInterfaceMockRecorder) InsertIngredient(ingredient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIngredient", reflect.TypeOf((*MockIngredientRepositoryInterface)(nil).InsertIngredient), ingredient)
}

// IsExistIngredient mocks base method.
func (m *MockIngredientRepositoryInterface) IsExistIngredient(ingredient string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExistIngredient", ingredient)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExistIngredient indicates an expected call of IsExistIngredient.
func (mr *MockIngredientRepositoryInterfaceMockRecorder) IsExistIngredient(ingredient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExistIngredient", reflect.TypeOf((*MockIngredientRepositoryInterface)(nil).IsExistIngredient), ingredient)
}

// MockProductRepositoryInterface is a mock of ProductRepositoryInterface interface.
type MockProductRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepositoryInterfaceMockRecorder
}

// MockProductRepositoryInterfaceMockRecorder is the mock recorder for MockProductRepositoryInterface.
type MockProductRepositoryInterfaceMockRecorder struct {
	mock *MockProductRepositoryInterface
}

// NewMockProductRepositoryInterface creates a new mock instance.
func NewMockProductRepositoryInterface(ctrl *gomock.Controller) *MockProductRepositoryInterface {
	mock := &MockProductRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockProductRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepositoryInterface) EXPECT() *MockProductRepositoryInterfaceMockRecorder {
	return m.recorder
}

// GetAllProducts mocks base method.
func (m *MockProductRepositoryInterface) GetAllProducts() []models.Product {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProducts")
	ret0, _ := ret[0].([]models.Product)
	return ret0
}

// GetAllProducts indicates an expected call of GetAllProducts.
func (mr *MockProductRepositoryInterfaceMockRecorder) GetAllProducts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProducts", reflect.TypeOf((*MockProductRepositoryInterface)(nil).GetAllProducts))
}

// GetListOfProdBySupplier mocks base method.
func (m *MockProductRepositoryInterface) GetListOfProdBySupplier(suppID int) []models.Product {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListOfProdBySupplier", suppID)
	ret0, _ := ret[0].([]models.Product)
	return ret0
}

// GetListOfProdBySupplier indicates an expected call of GetListOfProdBySupplier.
func (mr *MockProductRepositoryInterfaceMockRecorder) GetListOfProdBySupplier(suppID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListOfProdBySupplier", reflect.TypeOf((*MockProductRepositoryInterface)(nil).GetListOfProdBySupplier), suppID)
}

// GetListOfProdInCategory mocks base method.
func (m *MockProductRepositoryInterface) GetListOfProdInCategory(catID int) []models.Product {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListOfProdInCategory", catID)
	ret0, _ := ret[0].([]models.Product)
	return ret0
}

// GetListOfProdInCategory indicates an expected call of GetListOfProdInCategory.
func (mr *MockProductRepositoryInterfaceMockRecorder) GetListOfProdInCategory(catID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListOfProdInCategory", reflect.TypeOf((*MockProductRepositoryInterface)(nil).GetListOfProdInCategory), catID)
}

// GetProductByID mocks base method.
func (m *MockProductRepositoryInterface) GetProductByID(id int) (models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", id)
	ret0, _ := ret[0].(models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockProductRepositoryInterfaceMockRecorder) GetProductByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockProductRepositoryInterface)(nil).GetProductByID), id)
}

// InsertToProducts mocks base method.
func (m *MockProductRepositoryInterface) InsertToProducts(mp models.Position, productCategoryID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertToProducts", mp, productCategoryID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertToProducts indicates an expected call of InsertToProducts.
func (mr *MockProductRepositoryInterfaceMockRecorder) InsertToProducts(mp, productCategoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertToProducts", reflect.TypeOf((*MockProductRepositoryInterface)(nil).InsertToProducts), mp, productCategoryID)
}

// UpdateProductById mocks base method.
func (m *MockProductRepositoryInterface) UpdateProductById(mp models.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductById", mp)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProductById indicates an expected call of UpdateProductById.
func (mr *MockProductRepositoryInterfaceMockRecorder) UpdateProductById(mp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductById", reflect.TypeOf((*MockProductRepositoryInterface)(nil).UpdateProductById), mp)
}

// MockProductsCategoriesRepositoryInterface is a mock of ProductsCategoriesRepositoryInterface interface.
type MockProductsCategoriesRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProductsCategoriesRepositoryInterfaceMockRecorder
}

// MockProductsCategoriesRepositoryInterfaceMockRecorder is the mock recorder for MockProductsCategoriesRepositoryInterface.
type MockProductsCategoriesRepositoryInterfaceMockRecorder struct {
	mock *MockProductsCategoriesRepositoryInterface
}

// NewMockProductsCategoriesRepositoryInterface creates a new mock instance.
func NewMockProductsCategoriesRepositoryInterface(ctrl *gomock.Controller) *MockProductsCategoriesRepositoryInterface {
	mock := &MockProductsCategoriesRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockProductsCategoriesRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductsCategoriesRepositoryInterface) EXPECT() *MockProductsCategoriesRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateCategory mocks base method.
func (m *MockProductsCategoriesRepositoryInterface) CreateCategory(category models.ProductsCategories) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", category)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockProductsCategoriesRepositoryInterfaceMockRecorder) CreateCategory(category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockProductsCategoriesRepositoryInterface)(nil).CreateCategory), category)
}

// DeleteCategory mocks base method.
func (m *MockProductsCategoriesRepositoryInterface) DeleteCategory(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockProductsCategoriesRepositoryInterfaceMockRecorder) DeleteCategory(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockProductsCategoriesRepositoryInterface)(nil).DeleteCategory), id)
}

// GetAllCategories mocks base method.
func (m *MockProductsCategoriesRepositoryInterface) GetAllCategories() ([]models.ProductsCategories, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCategories")
	ret0, _ := ret[0].([]models.ProductsCategories)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCategories indicates an expected call of GetAllCategories.
func (mr *MockProductsCategoriesRepositoryInterfaceMockRecorder) GetAllCategories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCategories", reflect.TypeOf((*MockProductsCategoriesRepositoryInterface)(nil).GetAllCategories))
}

// GetCategoryByID mocks base method.
func (m *MockProductsCategoriesRepositoryInterface) GetCategoryByID(id int) (*models.ProductsCategories, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryByID", id)
	ret0, _ := ret[0].(*models.ProductsCategories)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryByID indicates an expected call of GetCategoryByID.
func (mr *MockProductsCategoriesRepositoryInterfaceMockRecorder) GetCategoryByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryByID", reflect.TypeOf((*MockProductsCategoriesRepositoryInterface)(nil).GetCategoryByID), id)
}

// MockProductsIngredientsRepositoryInterface is a mock of ProductsIngredientsRepositoryInterface interface.
type MockProductsIngredientsRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProductsIngredientsRepositoryInterfaceMockRecorder
}

// MockProductsIngredientsRepositoryInterfaceMockRecorder is the mock recorder for MockProductsIngredientsRepositoryInterface.
type MockProductsIngredientsRepositoryInterfaceMockRecorder struct {
	mock *MockProductsIngredientsRepositoryInterface
}

// NewMockProductsIngredientsRepositoryInterface creates a new mock instance.
func NewMockProductsIngredientsRepositoryInterface(ctrl *gomock.Controller) *MockProductsIngredientsRepositoryInterface {
	mock := &MockProductsIngredientsRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockProductsIngredientsRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductsIngredientsRepositoryInterface) EXPECT() *MockProductsIngredientsRepositoryInterfaceMockRecorder {
	return m.recorder
}

// DeleteIngredientByProduct mocks base method.
func (m *MockProductsIngredientsRepositoryInterface) DeleteIngredientByProduct(productID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIngredientByProduct", productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIngredientByProduct indicates an expected call of DeleteIngredientByProduct.
func (mr *MockProductsIngredientsRepositoryInterfaceMockRecorder) DeleteIngredientByProduct(productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIngredientByProduct", reflect.TypeOf((*MockProductsIngredientsRepositoryInterface)(nil).DeleteIngredientByProduct), productID)
}

// GetIngredientsByProductID mocks base method.
func (m *MockProductsIngredientsRepositoryInterface) GetIngredientsByProductID(id int) ([]models.ProductsIngredients, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIngredientsByProductID", id)
	ret0, _ := ret[0].([]models.ProductsIngredients)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIngredientsByProductID indicates an expected call of GetIngredientsByProductID.
func (mr *MockProductsIngredientsRepositoryInterfaceMockRecorder) GetIngredientsByProductID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIngredientsByProductID", reflect.TypeOf((*MockProductsIngredientsRepositoryInterface)(nil).GetIngredientsByProductID), id)
}

// InsertProductIngredient mocks base method.
func (m *MockProductsIngredientsRepositoryInterface) InsertProductIngredient(productID, ingredientID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertProductIngredient", productID, ingredientID)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertProductIngredient indicates an expected call of InsertProductIngredient.
func (mr *MockProductsIngredientsRepositoryInterfaceMockRecorder) InsertProductIngredient(productID, ingredientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertProductIngredient", reflect.TypeOf((*MockProductsIngredientsRepositoryInterface)(nil).InsertProductIngredient), productID, ingredientID)
}

// MockProductsSuppliersRepositoryInterface is a mock of ProductsSuppliersRepositoryInterface interface.
type MockProductsSuppliersRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProductsSuppliersRepositoryInterfaceMockRecorder
}

// MockProductsSuppliersRepositoryInterfaceMockRecorder is the mock recorder for MockProductsSuppliersRepositoryInterface.
type MockProductsSuppliersRepositoryInterfaceMockRecorder struct {
	mock *MockProductsSuppliersRepositoryInterface
}

// NewMockProductsSuppliersRepositoryInterface creates a new mock instance.
func NewMockProductsSuppliersRepositoryInterface(ctrl *gomock.Controller) *MockProductsSuppliersRepositoryInterface {
	mock := &MockProductsSuppliersRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockProductsSuppliersRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductsSuppliersRepositoryInterface) EXPECT() *MockProductsSuppliersRepositoryInterfaceMockRecorder {
	return m.recorder
}

// DeleteProductBySupplier mocks base method.
func (m *MockProductsSuppliersRepositoryInterface) DeleteProductBySupplier(ps models.ProductsSuppliers) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductBySupplier", ps)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductBySupplier indicates an expected call of DeleteProductBySupplier.
func (mr *MockProductsSuppliersRepositoryInterfaceMockRecorder) DeleteProductBySupplier(ps interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductBySupplier", reflect.TypeOf((*MockProductsSuppliersRepositoryInterface)(nil).DeleteProductBySupplier), ps)
}

// GetAllExternalProductIDByExternalSupplierID mocks base method.
func (m *MockProductsSuppliersRepositoryInterface) GetAllExternalProductIDByExternalSupplierID(extSuppID int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllExternalProductIDByExternalSupplierID", extSuppID)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllExternalProductIDByExternalSupplierID indicates an expected call of GetAllExternalProductIDByExternalSupplierID.
func (mr *MockProductsSuppliersRepositoryInterfaceMockRecorder) GetAllExternalProductIDByExternalSupplierID(extSuppID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllExternalProductIDByExternalSupplierID", reflect.TypeOf((*MockProductsSuppliersRepositoryInterface)(nil).GetAllExternalProductIDByExternalSupplierID), extSuppID)
}

// InsertProductSupplier mocks base method.
func (m *MockProductsSuppliersRepositoryInterface) InsertProductSupplier(ps models.ProductsSuppliers) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertProductSupplier", ps)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertProductSupplier indicates an expected call of InsertProductSupplier.
func (mr *MockProductsSuppliersRepositoryInterfaceMockRecorder) InsertProductSupplier(ps interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertProductSupplier", reflect.TypeOf((*MockProductsSuppliersRepositoryInterface)(nil).InsertProductSupplier), ps)
}

// IsExist mocks base method.
func (m *MockProductsSuppliersRepositoryInterface) IsExist(prodID, suppID int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExist", prodID, suppID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExist indicates an expected call of IsExist.
func (mr *MockProductsSuppliersRepositoryInterfaceMockRecorder) IsExist(prodID, suppID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExist", reflect.TypeOf((*MockProductsSuppliersRepositoryInterface)(nil).IsExist), prodID, suppID)
}

// IsExistProductSupplier mocks base method.
func (m *MockProductsSuppliersRepositoryInterface) IsExistProductSupplier(ps models.ProductsSuppliers) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExistProductSupplier", ps)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExistProductSupplier indicates an expected call of IsExistProductSupplier.
func (mr *MockProductsSuppliersRepositoryInterfaceMockRecorder) IsExistProductSupplier(ps interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExistProductSupplier", reflect.TypeOf((*MockProductsSuppliersRepositoryInterface)(nil).IsExistProductSupplier), ps)
}

// UpdatePriceByExternalData mocks base method.
func (m *MockProductsSuppliersRepositoryInterface) UpdatePriceByExternalData(price float64, extProdID, extSuppID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePriceByExternalData", price, extProdID, extSuppID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePriceByExternalData indicates an expected call of UpdatePriceByExternalData.
func (mr *MockProductsSuppliersRepositoryInterfaceMockRecorder) UpdatePriceByExternalData(price, extProdID, extSuppID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePriceByExternalData", reflect.TypeOf((*MockProductsSuppliersRepositoryInterface)(nil).UpdatePriceByExternalData), price, extProdID, extSuppID)
}

// MockSupplierRepositoryInterface is a mock of SupplierRepositoryInterface interface.
type MockSupplierRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSupplierRepositoryInterfaceMockRecorder
}

// MockSupplierRepositoryInterfaceMockRecorder is the mock recorder for MockSupplierRepositoryInterface.
type MockSupplierRepositoryInterfaceMockRecorder struct {
	mock *MockSupplierRepositoryInterface
}

// NewMockSupplierRepositoryInterface creates a new mock instance.
func NewMockSupplierRepositoryInterface(ctrl *gomock.Controller) *MockSupplierRepositoryInterface {
	mock := &MockSupplierRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockSupplierRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSupplierRepositoryInterface) EXPECT() *MockSupplierRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateSupplier mocks base method.
func (m *MockSupplierRepositoryInterface) CreateSupplier(supp models.SupplierForParse, categorySupplierID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSupplier", supp, categorySupplierID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSupplier indicates an expected call of CreateSupplier.
func (mr *MockSupplierRepositoryInterfaceMockRecorder) CreateSupplier(supp, categorySupplierID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSupplier", reflect.TypeOf((*MockSupplierRepositoryInterface)(nil).CreateSupplier), supp, categorySupplierID)
}

// GetAllSuppliers mocks base method.
func (m *MockSupplierRepositoryInterface) GetAllSuppliers() ([]models.Supplier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSuppliers")
	ret0, _ := ret[0].([]models.Supplier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSuppliers indicates an expected call of GetAllSuppliers.
func (mr *MockSupplierRepositoryInterfaceMockRecorder) GetAllSuppliers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSuppliers", reflect.TypeOf((*MockSupplierRepositoryInterface)(nil).GetAllSuppliers))
}

// GetSupplierByID mocks base method.
func (m *MockSupplierRepositoryInterface) GetSupplierByID(id int) (models.Supplier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupplierByID", id)
	ret0, _ := ret[0].(models.Supplier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupplierByID indicates an expected call of GetSupplierByID.
func (mr *MockSupplierRepositoryInterfaceMockRecorder) GetSupplierByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupplierByID", reflect.TypeOf((*MockSupplierRepositoryInterface)(nil).GetSupplierByID), id)
}

// GetSupplierByName mocks base method.
func (m *MockSupplierRepositoryInterface) GetSupplierByName(name string) ([]models.Supplier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupplierByName", name)
	ret0, _ := ret[0].([]models.Supplier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupplierByName indicates an expected call of GetSupplierByName.
func (mr *MockSupplierRepositoryInterfaceMockRecorder) GetSupplierByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupplierByName", reflect.TypeOf((*MockSupplierRepositoryInterface)(nil).GetSupplierByName), name)
}

// UpdateWorkingHoursByID mocks base method.
func (m *MockSupplierRepositoryInterface) UpdateWorkingHoursByID(ms models.Supplier) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkingHoursByID", ms)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWorkingHoursByID indicates an expected call of UpdateWorkingHoursByID.
func (mr *MockSupplierRepositoryInterfaceMockRecorder) UpdateWorkingHoursByID(ms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkingHoursByID", reflect.TypeOf((*MockSupplierRepositoryInterface)(nil).UpdateWorkingHoursByID), ms)
}

// MockSuppliersCategoriesRepositoryInterface is a mock of SuppliersCategoriesRepositoryInterface interface.
type MockSuppliersCategoriesRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSuppliersCategoriesRepositoryInterfaceMockRecorder
}

// MockSuppliersCategoriesRepositoryInterfaceMockRecorder is the mock recorder for MockSuppliersCategoriesRepositoryInterface.
type MockSuppliersCategoriesRepositoryInterfaceMockRecorder struct {
	mock *MockSuppliersCategoriesRepositoryInterface
}

// NewMockSuppliersCategoriesRepositoryInterface creates a new mock instance.
func NewMockSuppliersCategoriesRepositoryInterface(ctrl *gomock.Controller) *MockSuppliersCategoriesRepositoryInterface {
	mock := &MockSuppliersCategoriesRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockSuppliersCategoriesRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSuppliersCategoriesRepositoryInterface) EXPECT() *MockSuppliersCategoriesRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateCategory mocks base method.
func (m *MockSuppliersCategoriesRepositoryInterface) CreateCategory(categories models.SuppliersCategories) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", categories)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockSuppliersCategoriesRepositoryInterfaceMockRecorder) CreateCategory(categories interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockSuppliersCategoriesRepositoryInterface)(nil).CreateCategory), categories)
}

// GetSupplierCategoryID mocks base method.
func (m *MockSuppliersCategoriesRepositoryInterface) GetSupplierCategoryID(name string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupplierCategoryID", name)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupplierCategoryID indicates an expected call of GetSupplierCategoryID.
func (mr *MockSuppliersCategoriesRepositoryInterfaceMockRecorder) GetSupplierCategoryID(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupplierCategoryID", reflect.TypeOf((*MockSuppliersCategoriesRepositoryInterface)(nil).GetSupplierCategoryID), name)
}
