// Code generated by MockGen. DO NOT EDIT.
// Source: /home/yurii/delivery/internal/repository_interfaces/user_interfaces.go

// Package mock_repository_interfaces is a generated GoMock package.
package mock_repository_interfaces

import (
	models "delivery/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepositoryInterface is a mock of UserRepositoryInterface interface.
type MockUserRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryInterfaceMockRecorder
}

// MockUserRepositoryInterfaceMockRecorder is the mock recorder for MockUserRepositoryInterface.
type MockUserRepositoryInterfaceMockRecorder struct {
	mock *MockUserRepositoryInterface
}

// NewMockUserRepositoryInterface creates a new mock instance.
func NewMockUserRepositoryInterface(ctrl *gomock.Controller) *MockUserRepositoryInterface {
	mock := &MockUserRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositoryInterface) EXPECT() *MockUserRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepositoryInterface) CreateUser(user *models.RegistrationRequest, passwordHash string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user, passwordHash)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryInterfaceMockRecorder) CreateUser(user, passwordHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepositoryInterface)(nil).CreateUser), user, passwordHash)
}

// GetUserByEmail mocks base method.
func (m *MockUserRepositoryInterface) GetUserByEmail(email string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserRepositoryInterfaceMockRecorder) GetUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetUserByEmail), email)
}

// GetUserById mocks base method.
func (m *MockUserRepositoryInterface) GetUserById(id int) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", id)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockUserRepositoryInterfaceMockRecorder) GetUserById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetUserById), id)
}

// GetUserByLogin mocks base method.
func (m *MockUserRepositoryInterface) GetUserByLogin(login string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByLogin", login)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByLogin indicates an expected call of GetUserByLogin.
func (mr *MockUserRepositoryInterfaceMockRecorder) GetUserByLogin(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLogin", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetUserByLogin), login)
}

// UpdateUserById mocks base method.
func (m *MockUserRepositoryInterface) UpdateUserById(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserById", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserById indicates an expected call of UpdateUserById.
func (mr *MockUserRepositoryInterfaceMockRecorder) UpdateUserById(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserById", reflect.TypeOf((*MockUserRepositoryInterface)(nil).UpdateUserById), user)
}

// MockUserAccessTokenRepositoryInterface is a mock of UserAccessTokenRepositoryInterface interface.
type MockUserAccessTokenRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserAccessTokenRepositoryInterfaceMockRecorder
}

// MockUserAccessTokenRepositoryInterfaceMockRecorder is the mock recorder for MockUserAccessTokenRepositoryInterface.
type MockUserAccessTokenRepositoryInterfaceMockRecorder struct {
	mock *MockUserAccessTokenRepositoryInterface
}

// NewMockUserAccessTokenRepositoryInterface creates a new mock instance.
func NewMockUserAccessTokenRepositoryInterface(ctrl *gomock.Controller) *MockUserAccessTokenRepositoryInterface {
	mock := &MockUserAccessTokenRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockUserAccessTokenRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserAccessTokenRepositoryInterface) EXPECT() *MockUserAccessTokenRepositoryInterfaceMockRecorder {
	return m.recorder
}

// DeleteNaturallyExpiredAccessToken mocks base method.
func (m *MockUserAccessTokenRepositoryInterface) DeleteNaturallyExpiredAccessToken() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteNaturallyExpiredAccessToken")
}

// DeleteNaturallyExpiredAccessToken indicates an expected call of DeleteNaturallyExpiredAccessToken.
func (mr *MockUserAccessTokenRepositoryInterfaceMockRecorder) DeleteNaturallyExpiredAccessToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNaturallyExpiredAccessToken", reflect.TypeOf((*MockUserAccessTokenRepositoryInterface)(nil).DeleteNaturallyExpiredAccessToken))
}

// ExpiredAccessToken mocks base method.
func (m *MockUserAccessTokenRepositoryInterface) ExpiredAccessToken(userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpiredAccessToken", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExpiredAccessToken indicates an expected call of ExpiredAccessToken.
func (mr *MockUserAccessTokenRepositoryInterfaceMockRecorder) ExpiredAccessToken(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpiredAccessToken", reflect.TypeOf((*MockUserAccessTokenRepositoryInterface)(nil).ExpiredAccessToken), userID)
}

// GetAccessTokenByUserID mocks base method.
func (m *MockUserAccessTokenRepositoryInterface) GetAccessTokenByUserID(userID int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessTokenByUserID", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessTokenByUserID indicates an expected call of GetAccessTokenByUserID.
func (mr *MockUserAccessTokenRepositoryInterfaceMockRecorder) GetAccessTokenByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessTokenByUserID", reflect.TypeOf((*MockUserAccessTokenRepositoryInterface)(nil).GetAccessTokenByUserID), userID)
}

// GetByAccessToken mocks base method.
func (m *MockUserAccessTokenRepositoryInterface) GetByAccessToken(accessToken string) (models.UserAccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAccessToken", accessToken)
	ret0, _ := ret[0].(models.UserAccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAccessToken indicates an expected call of GetByAccessToken.
func (mr *MockUserAccessTokenRepositoryInterfaceMockRecorder) GetByAccessToken(accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAccessToken", reflect.TypeOf((*MockUserAccessTokenRepositoryInterface)(nil).GetByAccessToken), accessToken)
}

// InsertAccessToken mocks base method.
func (m *MockUserAccessTokenRepositoryInterface) InsertAccessToken(userToken models.UserAccessToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAccessToken", userToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertAccessToken indicates an expected call of InsertAccessToken.
func (mr *MockUserAccessTokenRepositoryInterfaceMockRecorder) InsertAccessToken(userToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAccessToken", reflect.TypeOf((*MockUserAccessTokenRepositoryInterface)(nil).InsertAccessToken), userToken)
}

// IsExistAccess mocks base method.
func (m *MockUserAccessTokenRepositoryInterface) IsExistAccess(userID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExistAccess", userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExistAccess indicates an expected call of IsExistAccess.
func (mr *MockUserAccessTokenRepositoryInterfaceMockRecorder) IsExistAccess(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExistAccess", reflect.TypeOf((*MockUserAccessTokenRepositoryInterface)(nil).IsExistAccess), userID)
}

// UpdateOldAndInsertNewAccessToken mocks base method.
func (m *MockUserAccessTokenRepositoryInterface) UpdateOldAndInsertNewAccessToken(userID int, response models.UserAccessToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOldAndInsertNewAccessToken", userID, response)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOldAndInsertNewAccessToken indicates an expected call of UpdateOldAndInsertNewAccessToken.
func (mr *MockUserAccessTokenRepositoryInterfaceMockRecorder) UpdateOldAndInsertNewAccessToken(userID, response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOldAndInsertNewAccessToken", reflect.TypeOf((*MockUserAccessTokenRepositoryInterface)(nil).UpdateOldAndInsertNewAccessToken), userID, response)
}

// MockUserRefreshTokenRepositoryInterface is a mock of UserRefreshTokenRepositoryInterface interface.
type MockUserRefreshTokenRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserRefreshTokenRepositoryInterfaceMockRecorder
}

// MockUserRefreshTokenRepositoryInterfaceMockRecorder is the mock recorder for MockUserRefreshTokenRepositoryInterface.
type MockUserRefreshTokenRepositoryInterfaceMockRecorder struct {
	mock *MockUserRefreshTokenRepositoryInterface
}

// NewMockUserRefreshTokenRepositoryInterface creates a new mock instance.
func NewMockUserRefreshTokenRepositoryInterface(ctrl *gomock.Controller) *MockUserRefreshTokenRepositoryInterface {
	mock := &MockUserRefreshTokenRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockUserRefreshTokenRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRefreshTokenRepositoryInterface) EXPECT() *MockUserRefreshTokenRepositoryInterfaceMockRecorder {
	return m.recorder
}

// DeleteNaturallyExpiredRefreshToken mocks base method.
func (m *MockUserRefreshTokenRepositoryInterface) DeleteNaturallyExpiredRefreshToken() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteNaturallyExpiredRefreshToken")
}

// DeleteNaturallyExpiredRefreshToken indicates an expected call of DeleteNaturallyExpiredRefreshToken.
func (mr *MockUserRefreshTokenRepositoryInterfaceMockRecorder) DeleteNaturallyExpiredRefreshToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNaturallyExpiredRefreshToken", reflect.TypeOf((*MockUserRefreshTokenRepositoryInterface)(nil).DeleteNaturallyExpiredRefreshToken))
}

// ExpiredRefreshToken mocks base method.
func (m *MockUserRefreshTokenRepositoryInterface) ExpiredRefreshToken(userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpiredRefreshToken", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExpiredRefreshToken indicates an expected call of ExpiredRefreshToken.
func (mr *MockUserRefreshTokenRepositoryInterfaceMockRecorder) ExpiredRefreshToken(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpiredRefreshToken", reflect.TypeOf((*MockUserRefreshTokenRepositoryInterface)(nil).ExpiredRefreshToken), userID)
}

// GetByRefreshToken mocks base method.
func (m *MockUserRefreshTokenRepositoryInterface) GetByRefreshToken(refreshToken string) (models.UserRefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByRefreshToken", refreshToken)
	ret0, _ := ret[0].(models.UserRefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByRefreshToken indicates an expected call of GetByRefreshToken.
func (mr *MockUserRefreshTokenRepositoryInterfaceMockRecorder) GetByRefreshToken(refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByRefreshToken", reflect.TypeOf((*MockUserRefreshTokenRepositoryInterface)(nil).GetByRefreshToken), refreshToken)
}

// GetRefreshTokenByUserID mocks base method.
func (m *MockUserRefreshTokenRepositoryInterface) GetRefreshTokenByUserID(userID int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshTokenByUserID", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefreshTokenByUserID indicates an expected call of GetRefreshTokenByUserID.
func (mr *MockUserRefreshTokenRepositoryInterfaceMockRecorder) GetRefreshTokenByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshTokenByUserID", reflect.TypeOf((*MockUserRefreshTokenRepositoryInterface)(nil).GetRefreshTokenByUserID), userID)
}

// InsertRefreshToken mocks base method.
func (m *MockUserRefreshTokenRepositoryInterface) InsertRefreshToken(userToken models.UserRefreshToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRefreshToken", userToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertRefreshToken indicates an expected call of InsertRefreshToken.
func (mr *MockUserRefreshTokenRepositoryInterfaceMockRecorder) InsertRefreshToken(userToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRefreshToken", reflect.TypeOf((*MockUserRefreshTokenRepositoryInterface)(nil).InsertRefreshToken), userToken)
}

// IsExistRefresh mocks base method.
func (m *MockUserRefreshTokenRepositoryInterface) IsExistRefresh(userID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExistRefresh", userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExistRefresh indicates an expected call of IsExistRefresh.
func (mr *MockUserRefreshTokenRepositoryInterfaceMockRecorder) IsExistRefresh(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExistRefresh", reflect.TypeOf((*MockUserRefreshTokenRepositoryInterface)(nil).IsExistRefresh), userID)
}

// UpdateOldAndInsertNewRefreshToken mocks base method.
func (m *MockUserRefreshTokenRepositoryInterface) UpdateOldAndInsertNewRefreshToken(userID int, response models.UserRefreshToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOldAndInsertNewRefreshToken", userID, response)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOldAndInsertNewRefreshToken indicates an expected call of UpdateOldAndInsertNewRefreshToken.
func (mr *MockUserRefreshTokenRepositoryInterfaceMockRecorder) UpdateOldAndInsertNewRefreshToken(userID, response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOldAndInsertNewRefreshToken", reflect.TypeOf((*MockUserRefreshTokenRepositoryInterface)(nil).UpdateOldAndInsertNewRefreshToken), userID, response)
}

// MockOrderProductRepositoryInterface is a mock of OrderProductRepositoryInterface interface.
type MockOrderProductRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOrderProductRepositoryInterfaceMockRecorder
}

// MockOrderProductRepositoryInterfaceMockRecorder is the mock recorder for MockOrderProductRepositoryInterface.
type MockOrderProductRepositoryInterfaceMockRecorder struct {
	mock *MockOrderProductRepositoryInterface
}

// NewMockOrderProductRepositoryInterface creates a new mock instance.
func NewMockOrderProductRepositoryInterface(ctrl *gomock.Controller) *MockOrderProductRepositoryInterface {
	mock := &MockOrderProductRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockOrderProductRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderProductRepositoryInterface) EXPECT() *MockOrderProductRepositoryInterfaceMockRecorder {
	return m.recorder
}

// DeleteAll mocks base method.
func (m *MockOrderProductRepositoryInterface) DeleteAll(order models.OrderProducts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockOrderProductRepositoryInterfaceMockRecorder) DeleteAll(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockOrderProductRepositoryInterface)(nil).DeleteAll), order)
}

// DeleteProduct mocks base method.
func (m *MockOrderProductRepositoryInterface) DeleteProduct(order models.OrderProducts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockOrderProductRepositoryInterfaceMockRecorder) DeleteProduct(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockOrderProductRepositoryInterface)(nil).DeleteProduct), order)
}

// GetAllProductsByOrderID mocks base method.
func (m *MockOrderProductRepositoryInterface) GetAllProductsByOrderID(orderID int) ([]models.OrderProducts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProductsByOrderID", orderID)
	ret0, _ := ret[0].([]models.OrderProducts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProductsByOrderID indicates an expected call of GetAllProductsByOrderID.
func (mr *MockOrderProductRepositoryInterfaceMockRecorder) GetAllProductsByOrderID(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProductsByOrderID", reflect.TypeOf((*MockOrderProductRepositoryInterface)(nil).GetAllProductsByOrderID), orderID)
}

// InsertToOrdersProducts mocks base method.
func (m *MockOrderProductRepositoryInterface) InsertToOrdersProducts(mo models.OrderProducts) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertToOrdersProducts", mo)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertToOrdersProducts indicates an expected call of InsertToOrdersProducts.
func (mr *MockOrderProductRepositoryInterfaceMockRecorder) InsertToOrdersProducts(mo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertToOrdersProducts", reflect.TypeOf((*MockOrderProductRepositoryInterface)(nil).InsertToOrdersProducts), mo)
}

// UpdateNumbersByProductAndOrderID mocks base method.
func (m *MockOrderProductRepositoryInterface) UpdateNumbersByProductAndOrderID(mo models.OrderProducts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNumbersByProductAndOrderID", mo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNumbersByProductAndOrderID indicates an expected call of UpdateNumbersByProductAndOrderID.
func (mr *MockOrderProductRepositoryInterfaceMockRecorder) UpdateNumbersByProductAndOrderID(mo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNumbersByProductAndOrderID", reflect.TypeOf((*MockOrderProductRepositoryInterface)(nil).UpdateNumbersByProductAndOrderID), mo)
}

// MockOrderRepositoryInterface is a mock of OrderRepositoryInterface interface.
type MockOrderRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryInterfaceMockRecorder
}

// MockOrderRepositoryInterfaceMockRecorder is the mock recorder for MockOrderRepositoryInterface.
type MockOrderRepositoryInterfaceMockRecorder struct {
	mock *MockOrderRepositoryInterface
}

// NewMockOrderRepositoryInterface creates a new mock instance.
func NewMockOrderRepositoryInterface(ctrl *gomock.Controller) *MockOrderRepositoryInterface {
	mock := &MockOrderRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepositoryInterface) EXPECT() *MockOrderRepositoryInterfaceMockRecorder {
	return m.recorder
}

// DeleteOrderByUserID mocks base method.
func (m *MockOrderRepositoryInterface) DeleteOrderByUserID(userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrderByUserID", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrderByUserID indicates an expected call of DeleteOrderByUserID.
func (mr *MockOrderRepositoryInterfaceMockRecorder) DeleteOrderByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrderByUserID", reflect.TypeOf((*MockOrderRepositoryInterface)(nil).DeleteOrderByUserID), userID)
}

// GetOrderByID mocks base method.
func (m *MockOrderRepositoryInterface) GetOrderByID(id int) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", id)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockOrderRepositoryInterfaceMockRecorder) GetOrderByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockOrderRepositoryInterface)(nil).GetOrderByID), id)
}

// GetOrderByUserIDNotPaidNotCompleted mocks base method.
func (m *MockOrderRepositoryInterface) GetOrderByUserIDNotPaidNotCompleted(userID int) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByUserIDNotPaidNotCompleted", userID)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByUserIDNotPaidNotCompleted indicates an expected call of GetOrderByUserIDNotPaidNotCompleted.
func (mr *MockOrderRepositoryInterfaceMockRecorder) GetOrderByUserIDNotPaidNotCompleted(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByUserIDNotPaidNotCompleted", reflect.TypeOf((*MockOrderRepositoryInterface)(nil).GetOrderByUserIDNotPaidNotCompleted), userID)
}

// InsertToOrders mocks base method.
func (m *MockOrderRepositoryInterface) InsertToOrders(mo models.Order) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertToOrders", mo)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertToOrders indicates an expected call of InsertToOrders.
func (mr *MockOrderRepositoryInterfaceMockRecorder) InsertToOrders(mo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertToOrders", reflect.TypeOf((*MockOrderRepositoryInterface)(nil).InsertToOrders), mo)
}

// UpdateOrdersByID mocks base method.
func (m *MockOrderRepositoryInterface) UpdateOrdersByID(mo *models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrdersByID", mo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrdersByID indicates an expected call of UpdateOrdersByID.
func (mr *MockOrderRepositoryInterfaceMockRecorder) UpdateOrdersByID(mo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrdersByID", reflect.TypeOf((*MockOrderRepositoryInterface)(nil).UpdateOrdersByID), mo)
}

// UpdateOrdersByUserID mocks base method.
func (m *MockOrderRepositoryInterface) UpdateOrdersByUserID(mo *models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrdersByUserID", mo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrdersByUserID indicates an expected call of UpdateOrdersByUserID.
func (mr *MockOrderRepositoryInterfaceMockRecorder) UpdateOrdersByUserID(mo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrdersByUserID", reflect.TypeOf((*MockOrderRepositoryInterface)(nil).UpdateOrdersByUserID), mo)
}

// MockUserContactRepositoryInterface is a mock of UserContactRepositoryInterface interface.
type MockUserContactRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserContactRepositoryInterfaceMockRecorder
}

// MockUserContactRepositoryInterfaceMockRecorder is the mock recorder for MockUserContactRepositoryInterface.
type MockUserContactRepositoryInterfaceMockRecorder struct {
	mock *MockUserContactRepositoryInterface
}

// NewMockUserContactRepositoryInterface creates a new mock instance.
func NewMockUserContactRepositoryInterface(ctrl *gomock.Controller) *MockUserContactRepositoryInterface {
	mock := &MockUserContactRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockUserContactRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserContactRepositoryInterface) EXPECT() *MockUserContactRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateUserInfo mocks base method.
func (m *MockUserContactRepositoryInterface) CreateUserInfo(data models.UserContactData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserInfo", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserInfo indicates an expected call of CreateUserInfo.
func (mr *MockUserContactRepositoryInterfaceMockRecorder) CreateUserInfo(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserInfo", reflect.TypeOf((*MockUserContactRepositoryInterface)(nil).CreateUserInfo), data)
}

// GetUserAddressByUSerID mocks base method.
func (m *MockUserContactRepositoryInterface) GetUserAddressByUSerID(userID int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAddressByUSerID", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAddressByUSerID indicates an expected call of GetUserAddressByUSerID.
func (mr *MockUserContactRepositoryInterfaceMockRecorder) GetUserAddressByUSerID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAddressByUSerID", reflect.TypeOf((*MockUserContactRepositoryInterface)(nil).GetUserAddressByUSerID), userID)
}

// GetUserInfoByUserID mocks base method.
func (m *MockUserContactRepositoryInterface) GetUserInfoByUserID(userID int) ([]models.UserContactData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfoByUserID", userID)
	ret0, _ := ret[0].([]models.UserContactData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfoByUserID indicates an expected call of GetUserInfoByUserID.
func (mr *MockUserContactRepositoryInterfaceMockRecorder) GetUserInfoByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfoByUserID", reflect.TypeOf((*MockUserContactRepositoryInterface)(nil).GetUserInfoByUserID), userID)
}

// UpdateAddress mocks base method.
func (m *MockUserContactRepositoryInterface) UpdateAddress(userID int, newAddress string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAddress", userID, newAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAddress indicates an expected call of UpdateAddress.
func (mr *MockUserContactRepositoryInterfaceMockRecorder) UpdateAddress(userID, newAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddress", reflect.TypeOf((*MockUserContactRepositoryInterface)(nil).UpdateAddress), userID, newAddress)
}
